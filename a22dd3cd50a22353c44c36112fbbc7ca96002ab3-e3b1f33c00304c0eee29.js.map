{"version":3,"file":"a22dd3cd50a22353c44c36112fbbc7ca96002ab3-e3b1f33c00304c0eee29.js","mappings":"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","sources":["webpack://wedding/./src/layout/components/Button/index.js","webpack://wedding/./src/layout/components/Link/index.js","webpack://wedding/./src/layout/components/AddToCartButton/index.js","webpack://wedding/./src/layout/components/StripeBuyButton/index.js","webpack://wedding/./src/layout/jsonLd/index.js","webpack://wedding/./node_modules/querystringify/index.js","webpack://wedding/./node_modules/requires-port/index.js","webpack://wedding/./node_modules/url-parse/index.js"],"sourcesContent":["import * as React from \"react\";\n\nimport \"./styles.scss\";\n\nconst Button = (props) => {\n\n    return (\n        <button className=\"Button\" {...props}>\n            {props.children}\n        </button>\n    );\n};\n\nexport default Button;","import * as React from \"react\";\nimport { Link as GatsyLink } from \"gatsby\";\nimport ParseUrl from \"url-parse\";\nimport {cn} from \"../../../classnames\";\n\nconst okDomains = new Set([\n    \"localhost\",\n    \"petitsanimaux.github.io\",\n    \"petitsanimaux\",\n    \"crochetnest.com\",\n    \"crochetnest\",\n]);\n\nconst isCurDomain = (href) => {\n    const url = new ParseUrl(href);\n    return okDomains.has(url.hostname);\n}\n\nfunction detectURLs(message) {\n    const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?!&//=]*)/gi;\n    return message.match(urlRegex);\n}\n\nconst ThemedLink = (props) => {\n    const {className = '', disabled, href, useTheming = true} = props;\n    if (!href) {\n        return null;\n    }\n\n    const classname = useTheming ? cn(props, \"Link\") : cn(props, \"\");\n    const urls = detectURLs(href);\n    const url = urls && urls.length > 0 ? urls[0] : href;\n    if (isCurDomain(url)) {\n        return (<GatsyLink className={classname} to={disabled ? \"#\" : url}>{props.children}</GatsyLink>);\n    }\n\n    return (\n        <a className={classname} target=\"_blank\" href={disabled ? \"#\" : url}>{props.children} </a>\n    );\n}\n\nexport default ThemedLink;","import React, { useContext, useState }  from \"react\";\nimport cartContext from \"../../../context/cartContext\";\n\nimport Button from \"../Button\";\n\nconst AddToCartButton = (props) => {\n    const [ isAdding, setIsAdding] = useState(false);\n    const { cart, updateQuantity } = useContext(cartContext);\n\n    const {id, priceId} = props;\n    if (!priceId) {\n        return null;\n    }\n\n    const addItem = () => {\n        const item = cart.find(item => item.priceId === priceId);\n        if (!item) {\n            updateQuantity(priceId, id, 1);\n        } else {\n            updateQuantity(priceId, id, item.quantity + 1);\n        }\n        setIsAdding(true);\n        setTimeout(() => {\n            setIsAdding(false);\n        }, 400);\n    };\n\n    const text = isAdding ? 'Adding':  'Add to cart';\n    return (\n        <Button disabled={isAdding} onClick={addItem}>{text}</Button>\n    )\n}\n\nexport default AddToCartButton;","import React from \"react\";\nimport Link from \"../../components/Link\";\nimport AddToCartButton from \"../AddToCartButton\";\n\nimport useIsEnabled, {FLAGS} from \"../../../hooks/useIsEnabled\";\nimport \"./styles.scss\";\n\nconst StripeBuyButton = (props) => {\n    const isCartEnabled = useIsEnabled(FLAGS.CART);\n    const {id, priceId, stripeUrl} = props;\n\n    if (isCartEnabled && priceId) {\n        return (\n            <AddToCartButton priceId={priceId} id={id} />\n        );\n    }\n\n    const str = 'Buy with Stripe';\n    return (\n        <Link className=\"StripeBuyButton\" href={stripeUrl} useTheming={false}>{str}</Link>\n    )\n}\n\nexport default StripeBuyButton;","import React, {useEffect, useState}  from \"react\";\n\nexport const withTwoPassRendering = (WrappedComponent) => ({\n    children,\n    ...rest\n  }) => {\n    const [isClient, setIsClient] = useState(false);\n  \n    useEffect(() => {\n      setIsClient(true);\n    }, [setIsClient]);\n  \n    return (\n      <WrappedComponent {...rest} key={isClient}>\n        {children}\n      </WrappedComponent>\n    );\n  };\n\nconst JsonLd = (props) => {\n  const { data } = props;\n\n  return (\n    <script type='application/ld+json' dangerouslySetInnerHTML={{ __html: JSON.stringify(data) }} />\n  )\n\n};\n\nexport default JsonLd;","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?#&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encode(key);\n      value = encode(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n","'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , controlOrWhitespace = /^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , port = /:\\d+$/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/;\n\n/**\n * Remove control characters and whitespace from the beginning of a string.\n *\n * @param {Object|String} str String to trim.\n * @returns {String} A new string representing `str` stripped of control\n *     characters and whitespace from its beginning.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(controlOrWhitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (port.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':' || (port.test(url.hostname) && !url.port)) {\n    host += ':';\n  }\n\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n"],"names":["props","React","Object","assign","className","children","okDomains","Set","disabled","href","useTheming","classname","cn","urls","match","url","length","ParseUrl","has","hostname","isCurDomain","GatsyLink","to","target","isAdding","setIsAdding","useState","cart","updateQuantity","useContext","cartContext","id","priceId","text","Button","onClick","addItem","item","find","quantity","setTimeout","isCartEnabled","useIsEnabled","FLAGS","stripeUrl","AddToCartButton","Link","data","type","dangerouslySetInnerHTML","__html","JSON","stringify","prototype","hasOwnProperty","decode","input","decodeURIComponent","replace","e","encode","encodeURIComponent","exports","obj","prefix","value","key","pairs","call","isNaN","push","join","parse","query","part","parser","result","exec","module","port","protocol","split","required","qs","controlOrWhitespace","CRHTLF","slashes","protocolre","windowsDriveLetter","trimLeft","str","toString","rules","address","isSpecial","NaN","undefined","ignore","hash","lolcation","loc","window","g","self","location","finaldestination","Url","unescape","pathname","test","scheme","extractProtocol","rest","toLowerCase","forwardSlashes","otherSlashes","slashesCount","slice","this","relative","extracted","instruction","index","instructions","i","lastIndexOf","indexOf","charAt","base","path","concat","last","unshift","up","splice","resolve","host","username","password","auth","origin","set","fn","pop","char","ins"],"sourceRoot":""}